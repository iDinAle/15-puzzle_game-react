{"version":3,"sources":["utils/generateTiles.js","utils/areTilesNear.js","utils/switchTiles.js","App.js","index.js"],"names":["generateTiles","arr","result","i","temp","index","length","Math","floor","random","inv","k","j","x","column","row","push","id","number","areTilesNear","tile","emptyTile","sameRow","sameColumn","diffColumn","abs","diffRow","switchTiles","indexA","indexB","fields","forEach","field","grid","App","state","tiles","isGameOver","moveTile","_this","find","t","emptyTileIndex","indexOf","clickedTileIndex","findIndex","clone","Array","from","map","obj","Object","objectSpread2","checkGameOver","setState","slice","every","setNewGame","render","_this$state","react_default","a","createElement","className","cn","key","type","onClick","disabled","React","Component","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.eee19dce.chunk.js","sourcesContent":["export const generateTiles = () => {\n  const arr = [];\n  const result = [];\n\n  for (let i = 0; i < 16; i += 1) {\n    arr[i] = i;\n  }\n\n  let i = arr.length;\n  let temp;\n  let index;\n\n  while (i >= 0) {\n    i -= 1;\n    index = Math.floor((i + 1) * Math.random());\n    temp = arr[index];\n    arr[index] = arr[i];\n    arr[i] = temp;\n\n  }\n\n  let inv = 0;\n\n  for (let k = 0; k < 16; k += 1) {\n    if (arr[k]) {\n      for (let j = 0; j < k; j += 1) {\n        if (arr[j] > arr[k]) {\n          inv += 1;\n        }\n      }\n    } else {\n      inv += 1 + Math.floor(k / 4);\n    }\n  }\n\n  if (inv % 2 === 1) {\n    generateTiles();\n  }\n\n  for (let x = 0; x < arr.length; x += 1) {\n    const column = x % 4;\n    const row = Math.floor(x / 4);\n\n    result.push({\n      id: x,\n      number: arr[x],\n      column,\n      row,\n    });\n  }\n\n  return result;\n};\n","export const areTilesNear = (tile, emptyTile) => {\n  const sameRow = tile.row === emptyTile.row;\n  const sameColumn = tile.column === emptyTile.column;\n  const diffColumn = Math.abs(tile.column - emptyTile.column) === 1;\n  const diffRow = Math.abs(tile.row - emptyTile.row) === 1;\n\n  return (sameRow && diffColumn) || (sameColumn && diffRow);\n};\n","export const switchTiles = (arr, indexA, indexB, fields) => {\n  const result = arr;\n\n  fields.forEach((field) => {\n    const temp = result[indexA][field];\n\n    result[indexA][field] = result[indexB][field];\n    result[indexB][field] = temp;\n  });\n\n  return arr;\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport './App.scss';\n\nimport { generateTiles } from './utils/generateTiles';\nimport { areTilesNear } from './utils/areTilesNear';\nimport { switchTiles } from './utils/switchTiles';\n\nconst grid = generateTiles();\n\nclass App extends React.Component {\n  state = {\n    tiles: grid,\n    isGameOver: false,\n  };\n\n  moveTile = (tile) => {\n    const { tiles } = this.state;\n    const emptyTile = tiles.find(t => t.number === 0);\n\n    if (areTilesNear(tile, emptyTile)) {\n      const emptyTileIndex = tiles.indexOf(emptyTile);\n      const clickedTileIndex = tiles.findIndex(t => t.number === tile.number);\n      const clone = Array.from(tiles).map(obj => ({ ...obj }));\n\n      switchTiles(\n        clone,\n        emptyTileIndex,\n        clickedTileIndex,\n        ['row', 'column', 'id']\n      );\n\n      const temp = clone[emptyTileIndex];\n\n      clone[emptyTileIndex] = clone[clickedTileIndex];\n      clone[clickedTileIndex] = temp;\n\n      const isGameOver = this.checkGameOver(clone);\n\n      this.setState({\n        tiles: clone,\n        isGameOver,\n      });\n    }\n  };\n\n  checkGameOver = tiles => tiles.slice(0, 15).every(\n    (tile, index) => index + 1 === tile.number\n  )\n\n  setNewGame = () => {\n    this.setState({\n      tiles: generateTiles(),\n    });\n  };\n\n  render = () => {\n    const { tiles, isGameOver } = this.state;\n\n    return (\n      <div className=\"game\">\n        <h1 className=\"main-title\">15-puzzle Game</h1>\n\n        <div className=\"game__grid\">\n          {tiles.map(tile => (\n            <button\n              className={cn(\n                'game__tile',\n                tile.number === 0 && 'game__tile--invisible',\n              )}\n              key={tile.id}\n              type=\"button\"\n              onClick={() => this.moveTile(tile)}\n              disabled={isGameOver || tile.number === 0}\n            >\n              {tile.number !== 0 && tile.number}\n            </button>\n          ))}\n        </div>\n\n        <div className=\"game__message\">\n          {isGameOver && ('Congratulations! You have won!')}\n        </div>\n\n        <button\n          className=\"game__new-game-btn\"\n          type=\"button\"\n          onClick={this.setNewGame}\n        >\n          New game\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}